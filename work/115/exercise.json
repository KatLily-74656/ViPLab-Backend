{"Exercise":{
      "comment": "",
      "config": {"Octave": {
            "interpreting": {"flags": ""},
            "merging": {"sources": [
                  "preambel1",
                  "codeFromStudent",
                  "epilog1"
            ]},
            "stopAfterPhase": "interpreting"
      }},
      "description": "Get the experimental order of convergence (EOC) for an initial value problem (IVP)\nsolver (e.g. Euler-Cauchy method).",
      "elements": [
            {
                  "MIMEtype": "text/plain",
                  "emphasis": "Low",
                  "identifier": "preambel1",
                  "modifiable": false,
                  "name": "",
                  "syntaxHighlighting": "Matlab",
                  "value": "function get_EOC();\nfprintf('=======================\\n');\nfprintf('Get EOC (experimental order of convergence) of \\n');\nfprintf('IVP (initial value problems) solver: \\n');\nfprintf('=======================\\n');\n\n\n\n",
                  "visible": true
            },
            {
                  "MIMEtype": "text/plain",
                  "emphasis": "Low",
                  "identifier": "epilog1",
                  "modifiable": false,
                  "name": "",
                  "syntaxHighlighting": "Matlab",
                  "value": "\nfunction [rhs] = f(x,y);\n      rhs = -3 * y * x;\nend % function f(x,y)\n\nfunction [res]=y_exact(x);\n   res = exp((-1.5) * x^2);\nend % function y_exact\n\n\n%%%\n% Overwrites the built-in plot function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in plot function except\n% that complex values are forbitten and X values must\n% be provided for every plot.\n% \n% The arguments are X, Y and an optional LineSpec. These\n% two or three arguments can be appended multiple times.\n% X contains the x values of the points, Y the y values.\n% Consecutive points are drawn connected by a line.\n% X and Y must have one matching dimension if at least\n% one is a vector and must have the exact same dimension\n% if moth are matrices.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-08\n%%%\n\nfunction plot(X, Y, varargin)\n\t\n\t%%%\n  % ensure valid arguments\n  assert(not(isempty(X)), 'X must not be empty.');\n\tassert(not(isempty(Y)), 'Y must not be empty.');\n  assert(isnumeric(X), 'X must be numeric.');\n\tassert(isnumeric(Y), 'Y must be numeric.');\n  assert(not(isscalar(X)) || isvector(Y), 'If X is scalar Y must be a vector.');\n\tassert(not(isvector(X) && not(isscalar(X)) && isvector(Y)) || (length(X) == length(Y)), 'Vectors X and Y must have same dimensions.');\n\tassert(not(isvector(X) && not(isscalar(X)) && size(Y, 1) > 1 && size(Y, 2) > 1) || (length(X) == size(Y, 1) || length(X) == size(Y, 2)), 'Vector X and matrix Y must have one dimension in common.');\n\tassert(not(size(X, 1) > 1 && size(X, 2) > 1 && isvector(Y)) || (size(X, 1) == length(Y) || size(X, 2) == length(Y)), 'Matrix X and vector Y must have one dimension in common.');\n\tassert(not(size(X, 1) > 1 && size(X, 2) > 1 && size(Y, 1) > 1 && size(Y, 2) > 1) || isequal(size(X),size(Y)), 'Matrices X and Y must have same dimensions.');\n    \n  %%%\n\t% open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n\t% handle optional arguments\n\tLineSpec = '';\n\tnewArgIn = {};\n\t% if first optional argument is a string, it's the line specification\n\tif (size(varargin, 2) == 1) && ischar(varargin{1})\n\t\tLineSpec = varargin{1};\n\t% pass remaining optional arguments to next plot call\n\telseif (size(varargin, 2) > 1) && ischar(varargin{1})\n\t\tLineSpec = varargin{1};\n\t\tnewArgIn = varargin(2:size(varargin, 2));\n\telseif (size(varargin, 2) > 0)\n\t\tnewArgIn = varargin;\n\tend; %if\n\n\t%%%\n  % write color data\n  if length(LineSpec) > 0\n\t\tif not(isempty(strfind(LineSpec, 'r')))\n\t\t\tfprintf(plot_file, '# color 255 0 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'b')))\n\t\t\tfprintf(plot_file, '# color 0 0 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'g')))\n\t\t\tfprintf(plot_file, '# color 0 255 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'c')))\n\t\t\tfprintf(plot_file, '# color 0 255 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'm')))\n\t\t\tfprintf(plot_file, '# color 255 0 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'y')))\n\t\t\tfprintf(plot_file, '# color 255 255 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'k')))\n\t\t\tfprintf(plot_file, '# color 0 0 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'w')))\n\t\t\tfprintf(plot_file, '# color 255 255 255\\n');\n\t\tend; %if\n\t\n\t%%%\n  % write symbol data\n\t\tif not(isempty(strfind(LineSpec, 'x')))\n\t\t\tfprintf(plot_file, '# symbol x\\n');\n\t\telseif not(isempty(strfind(LineSpec, '*')))\n\t\t\tfprintf(plot_file, '# symbol *\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'v')))\n\t\t\tfprintf(plot_file, '# symbol v\\n');\n\t\telseif not(isempty(strfind(LineSpec, '^')))\n\t\t\tfprintf(plot_file, '# symbol ^\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'o')))\n\t\t\tfprintf(plot_file, '# symbol o\\n');\n\t\telseif not(isempty(strfind(LineSpec, 's')))\n\t\t\tfprintf(plot_file, '# symbol s\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'd')))\n\t\t\tfprintf(plot_file, '# symbol d\\n');\n\t\telse\n\t\t\tfprintf(plot_file, '# symbol none\\n');\n\t\tend; %if\n\tend; %if\n\t\n\t%%%\n\t% write plot data\n\t\n\t% if X is a scalar => Y a vector\n\tif isscalar(X)\n\t\tfor i=1:length(Y)\n\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(1), Y(i), X(1), Y(i));\n\t\tend; %for\n\t% if both X and Y are vectors\n\telseif isvector(X) && isvector(Y)\n\t\tfor i=1:(length(X)-1)\n\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(i), Y(i), X(i+1), Y(i+1));\n\t\tend; %for\n\t% if X is a vector and Y a matrix\n\telseif isvector(X) && size(Y, 1) > 1 && size(Y, 2) > 1\n\t\t% rotate matrix Y to match dimensions\n\t\tif length(X) ~= size(Y, 2)\n\t\t\tY = Y';\n\t\tend;% if\n\t\tfor j=1:size(Y, 1)\n\t\t\tfor i=1:(length(X)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(i), Y(j, i), X(i+1), Y(j, i+1));\n\t\t\tend; %for\n\t\tend; %for\n\t% if X is a matrix and Y a vector\n\telseif size(X, 1) > 1 && size(X, 2) > 1 && isvector(Y)\n\t\t% rotate matrix X to match dimensions\n\t\tif size(X, 2) ~= length(Y)\n\t\t\tX = X';\n\t\tend;% if\n\t\tfor j=1:size(X, 1)\n\t\t\tfor i=1:(length(Y)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(j, i), Y(i), X(j, i+1), Y(i+1));\n\t\t\tend; %for\n\t\tend; %for\n\t% if both X and Y are matrices\n\telse % size(X, 1) > 1 && size(X, 2) > 1 && size(Y, 1) > 1 && size(Y, 2) > 1)\n\t\tfor i=1:size(X, 2)\n\t\t\tfor j=1:(size(X, 1)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(j, i), Y(j, i), X(j+1, i), Y(j+1, i));\n\t\t\tend; %for\n\t\tend; %for\n\tend; %if\n\n  %%%\n  % close file\n  fclose(plot_file);\n\t\n\t%%%\n\t% recursivly call plot to work off remaining optional arguments\n\tif size(newArgIn, 2) == 0\n\t\treturn;\n\tend; %if\n\t\n\tassert(size(newArgIn, 2) >= 2, 'Wrong number of arguments, expected more arguments.');\n\t\n\tX = newArgIn{1};\n\tY = newArgIn{2};\n\tif size(newArgIn, 2) == 2\n\t\tplot(X, Y);\n\telse\n\t\tplot(X, Y, newArgIn{3:size(newArgIn, 2)});\n\tend; %if\n\t\nend %function\n\n%%%\n% Overwrites the built-in legend function and gives out\n% a ViPLab graphic format file (.vgf).\n% It breaks with th built-in legend function because it\n% can only handly one argument. If the legend is set all\n% plots from now on will use the new legend. To stay\n% compatible with the built-in legend use legend('')\n% at the end of your program to prevent a legend.\n% \n% The argument must be a string. It does not support\n% handles, orientation or multiple legends.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-12\n%%%\n\nfunction legend(PlotLegend)\n  % ensure valid arguments\n  assert(ischar(PlotLegend), 'First argument in legend must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write legend data\n  fprintf(plot_file, '# legend %s\\n', PlotLegend);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in title function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in legend function and adds\n% a title to the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction title(PlotTitle, varargin)\n  % ensure valid arguments\n  assert(ischar(PlotTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# title %s\\n', PlotTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in plot function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in plot function except\n% that complex values are forbitten and X values must\n% be provided for every plot.\n% \n% The arguments are X, Y and an optional LineSpec. These\n% two or three arguments can be appended multiple times.\n% X contains the x values of the points, Y the y values.\n% Consecutive points are drawn connected by a line.\n% X and Y must have one matching dimension if at least\n% one is a vector and must have the exact same dimension\n% if moth are matrices.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-01\n%%%\n\nfunction axis(Range)\n  xmin = Range(1);\n  xmax = Range(2);\n  ymin = Range(3);\n  ymax = Range(4);\n\t%%%\n  % ensure valid arguments\n  assert(isreal(xmin) && isreal(xmax) && isreal(ymin) && isreal(ymax), 'All arguments must be real numbers.');\n  assert(isscalar(xmin) && isscalar(xmax) && isscalar(ymin) && isscalar(ymax), 'All arguments must be scalars.');\n  assert(xmin < xmax, 'xmin must be smaller than xmax.');\n\tassert(ymin < ymax, 'ymin must be smaller than ymax.');\n\n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write axis data\n  fprintf(plot_file, '# x-range %f %f\\n', xmin, xmax);\n  fprintf(plot_file, '# y-range %f %f\\n', ymin, ymax);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in figure function.\n% The function does nothing but surpresses the built-in\n% figure function which opens a new plot window.\n%\n% It does not accept any arguments and has no return values.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-01\n%%%\n\nfunction figure()\n  % nothing todo just prevent buit-in function to open a plot window\nend %function\n\n%%%\n% Overwrites the built-in xlabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in xlabel function and adds\n% a label to the X-axis of the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction xlabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# x-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in ylabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in ylabel function and adds\n% a label to the Y-axis of the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction ylabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# y-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in zlabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in zlabel function and adds\n% a label to the Z-axis of the 3d-plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction zlabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# z-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\nfunction hold(varargin)\nend",
                  "visible": true
            },
            {
                  "MIMEtype": "text/plain",
                  "emphasis": "High",
                  "identifier": "codeFromStudent",
                  "modifiable": true,
                  "name": "",
                  "syntaxHighlighting": "Matlab",
                  "value": "% set initial data\nx_0  = 0;\nx_end = 2;\ny_0 = 1;\n\nE_1 = 0;\nh_1 =0;\nEOC = 0;\n%Err_hist = zeros(1,5);\n%h_hist = zeros(1,5);\ncounter = 1;\n\n% loop over different step sizes\nfor n = 4:10\n   n_steps = 2^n;\n   h = (x_end-x_0)/n_steps;\n   h_hist(counter) = h;\n\n   y  = y_0;  \n   x = 0;\n   Err = 0;\n   hist_y(counter,1) = y;\n   hist_x(counter,1) = x;\n\n   % time step loop\n   for i_step = 1:n_steps\n      %dy = Euler_Cauchy(y,h,x);\n      %dy = Improved_Euler_Cauchy(y,h,x);\n      %dy = Heun(y,h,x);\n      dy = Runge_Kutta(y,h,x);\n      y = y + dy;\n      x = x + h;\n      hist_y(counter,i_step+1) = y;\n      hist_x(counter,i_step+1) = x;\n      Err = Err + (y - y_exact(x))^2;\n   end % i_step\n   Err = sqrt(Err/n_steps);\n   Err_hist(counter) = Err;\n   fprintf('n_steps: %i\\n',n_steps);\n   fprintf('h: %f\\n',h);\n   fprintf('Error: %e\\n',Err);\n   if (EOC ~= 0)\n     E_2 = Err;\n     h_2 = h;\n     EOC = log(E_1/E_2)/log(h_1/h_2);\n     fprintf('EOC:  %f\\n',EOC);\n   else;\n     EOC = 1;\n     fprintf('First run. No EOC available.\\n');\n   end\n   fprintf('=======================\\n');\n   E_1 = Err;\n   h_1 = h;\n   counter = counter + 1;\n\nend % n\n\n% plot step-size over error to see exponential convergence\n% this requires double-logarithmic plots (not implemented yet)\n%plot(h_hist,Err_hist,'k');\n\n\n% plot results for differents step sizes\nx_exact_hist = linspace(0,x_end,2^10);\nfor i =1:2^10\n   y_exact_hist(i) = y_exact(x_exact_hist(i));\nend\nplot(hist_x(1,:),hist_y(1,:),'k');\n%plot(hist_x(2,:),hist_y(2,:),'r');\n%plot(hist_x(3,:),hist_y(3,:),'b');\nplot(x_exact_hist,y_exact_hist,'c');\n\nend % function get_EOC\n\n%-------------------------------------------------------%\nfunction [dy] = Euler_Cauchy(y,h,x);\n    dy = h * f(x,y);\nend % function Euler_Cauchy\n%-------------------------------------------------------%\nfunction [dy] = Improved_Euler_Cauchy(y,h,x);\n     y_tilde = y + h/2 * f(x,y);\n    dy = h * f(x+h/2,y_tilde);\nend % function Improved_Euler_Cauchy\n%-------------------------------------------------------%\nfunction [dy] = Heun(y,h,x);\n    y_tilde = y + h * f(x,y);\n    dy = h/2 * ( f(x,y) + f(x+h,y_tilde) );\nend % function Heun\n%-------------------------------------------------------%\nfunction [dy] = Runge_Kutta(y,h,x);\nk1=f(x,y);\nk2=f(x+h/2,y+h/2*k1);\nk3=f(x+h/2,y+h/2*k2);\nk4=f(x+h,y+h*k3);\ndy=h/6*(k1+2*(k2+k3)+k4);\nend  % function Runge_Kutta\n\n",
                  "visible": true
            }
      ],
      "identifier": "",
      "name": "[stresstest] EOC with IVP",
      "postTime": "Fri Apr 01 13:28:51 CEST 2011"
}}