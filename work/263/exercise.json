{"Exercise":{"department":"IWS","description":"Beispiel f√ºr die ViPLab-Homepage","name":"ODE-Solver in C","config":{"C":{"compiling":{"flags":"-Wall -std=c99 -pedantic","compiler":"gcc"},"linking":{"flags":"-lm"},"merging":{"sources":["Id1","Id2","Id3"]},"running":{},"stopAfterPhase":"running","checking":{"forbiddenCalls":"atof atoi atol atoll atoq bcmp bcopy bzero chmod chown dup execl execle execlp execv execve execvp fexecve fork gets lchown system unlink","sources":["Id3"]}}},"elements":[{"MIMEtype":"text/plain","visible":true,"modifiable":false,"value":"/* \n * C99 program to solve a simple ODE and plot the result and error.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n","emphasis":"Low","identifier":"Id1","syntaxHighlighting":"C"},{"MIMEtype":"text/plain","visible":false,"modifiable":false,"value":"\n// line types for graph lines\ntypedef enum\n{\n     solid = 0, dashed = 1, dotted = 2, dashdot = 3\n} linetype;\n\n// axis scale\ntypedef enum\n{\n     linear = 0, logarithmic = 1\n} scaletype;\n\n// valid symbols\nchar symbols[] = {' ', '.', 'x', '+', '*', 'v', '^', 'o', 's', 'd'};\n\n/****************************************************************\n * plot graph to current frame                                  *\n ****************************************************************/\nvoid viplab_plot_polyline_2d(char symbol, linetype line, \n        size_t color_r, size_t color_g, size_t color_b, \n        double* x_coords, double* y_coords, size_t element_count, char* legend)\n{\n\t// file handle to write to ViPLab plot file (vpf)\n\tFILE* plot_file;\n\tplot_file = fopen(\"vipplot.vgf\", \"a+\");\n\t\n\t// write plot formatting\n\tfprintf(plot_file, \"# color %zd %zd %zd\\n\", color_r, color_g, color_b);\n\t\n\tif (symbol == ' ')\n\t{\n\t\tfprintf(plot_file, \"# symbol none\\n\");\n\t}\n\telse\n\t{\n\t\tfprintf(plot_file, \"# symbol %c\\n\", symbol);\n\t}\n\t\n\tswitch (line)\n\t{\n\t\tcase solid:\n\t\t\tfprintf(plot_file, \"# linestyle solid\\n\");\n\t\t\tbreak;\n\t\tcase dashed:\n\t\t\tfprintf(plot_file, \"# linestyle dashed\\n\");\n\t\t\tbreak;\n\t\tcase dotted:\n\t\t\tfprintf(plot_file, \"# linestyle dotted\\n\");\n\t\t\tbreak;\n\t\tcase dashdot:\n\t\t\tfprintf(plot_file, \"# linestyle dash-dot\\n\");\n\t\t\tbreak;\n\t}\n\t\n\tif (legend != NULL)\n\t{\n\t\tfprintf(plot_file, \"# legend %s\\n\", legend);\n\t}\n\t\n\t// write plot data\n\tfor (int i = 1; i < element_count; i++)\n\t{\n\t\tfprintf(plot_file, \"%lf %lf %lf %lf\\n\", x_coords[i - 1],\n                        y_coords[i - 1], x_coords[i], y_coords[i]);\n\t}\n\t\n\t// close stream\n\tfclose(plot_file);\n}\n\n/****************************************************************\n * create a new frame, arguments which are NULL are ignored     *\n ****************************************************************/\nvoid viplab_plot_new_frame(char* title, char* label_x, char* label_y,\n                           scaletype scale_x, scaletype scale_y)\n{\n\t// file handle to write to ViPLab plot file (vpf)\n\tFILE* plot_file;\n\tplot_file = fopen(\"vipplot.vgf\", \"a+\");\n\t\n\tfprintf(plot_file, \"# newframe\\n\");\n\t\n\t// write plot formatting\n\tif (title != NULL)\n\t{\n\t\tfprintf(plot_file, \"# title %s\\n\", title);\n\t}\n\tif (label_x != NULL)\n\t{\n\t\tfprintf(plot_file, \"# x-label %s\\n\", label_x);\n\t}\n\tif (label_y != NULL)\n\t{\n\t\tfprintf(plot_file, \"# y-label %s\\n\", label_y);\n\t}\n\t\n\tfprintf(plot_file, \"# scale \");\n\tif ((scale_x == linear) && (scale_y == logarithmic))\n\t{\n\t\tfprintf(plot_file, \"lin-\");\n\t}\n\telse if (scale_x == logarithmic)\n\t{\n\t\tfprintf(plot_file, \"log-\");\n\t}\n\tif ((scale_y == linear) && (scale_x == logarithmic))\n\t{\n\t\tfprintf(plot_file, \"lin\\n\");\n\t}\n\telse if (scale_y == logarithmic)\n\t{\n\t\tfprintf(plot_file, \"log\\n\");\n\t}\n\t\n\t// close stream\n\tfclose(plot_file);\n}\n\n// create a new frame. Arguments which are NULL are ignored\nvoid viplab_frame_limits(double min_x, double max_x, double min_y, double max_y)\n{\n\t// file handle to write to ViPLab plot file (vpf)\n\tFILE* plot_file;\n\tplot_file = fopen(\"vipplot.vgf\", \"a+\");\n\t\n\tif (min_x < max_x)\n\t{\n\t\tfprintf(plot_file, \"# x-range %lf %lf\\n\", min_x, max_x);\n\t}\n\t\n\tif (min_y < max_y)\n\t{\n\t\tfprintf(plot_file, \"# y-range %lf %lf\\n\", min_y, max_y);\n\t}\n\t\n\t// close stream\n\tfclose(plot_file);\n}\n","emphasis":"Low","identifier":"Id2","syntaxHighlighting":"C"},{"MIMEtype":"text/plain","visible":true,"modifiable":true,"value":"double explicit_euler_step(double x, double y, double h);\ndouble heun_step(double x, double y, double h);\ndouble rk4_step(double x, double y, double h);\ndouble evaluate_function(double x, double y);\ndouble analytical_solution(double x);\n\n// main functions, here starts the program\nint main(int argc, char** argv)\n{\n    // start value for the ODE\n    double x0 = 0.0, y0 = 0.0;\n    // step size (proposed values are 0.03, 0.02, 0.01 and 0.001)\n    double h = 0.02;\n    // end of calculation intervall\n    double end = 1.0;\n    // number of steps\n    int steps = (int)(end/h);\n    // x- and y-values\n    double x[steps + 1], euler[steps + 1], heun[steps + 1], rk[steps + 1], exact[steps + 1];\n    // error\n    double err_euler[steps + 1], err_heun[steps + 1], err_rk[steps + 1];\n    \n    x[0] = x0;\n    euler[0] = y0;\n    heun[0] = y0;\n    rk[0] = y0;\n    exact[0] = y0;\n    err_euler[0] = 0.0;\n    err_heun[0] = 0.0;\n    err_rk[0] = 0.0;\n    \n    for (int i = 0; i < steps; i++)\n    {\n        // calculate explicit euler\n        x[i + 1] = x[i] + h;\n        euler[i + 1] = explicit_euler_step(x[i], euler[i], h);\n        heun[i + 1] = heun_step(x[i], heun[i], h);\n        rk[i + 1] = rk4_step(x[i], rk[i], h);\n        exact[i + 1] = analytical_solution(x[i + 1]);\n        \n        //printf(\"Values: %f, %f, %f, %f\\n\", x[i + 1], euler[i + 1], heun[i + 1], rk[i + 1], exact[i + 1]);\n\n        err_euler[i + 1] = fabs(euler[i + 1] - exact[i + 1]);\n        err_heun[i + 1] = fabs(heun[i + 1] - exact[i + 1]);\n        err_rk[i + 1] = fabs(rk[i + 1] - exact[i + 1]);\n\n        //printf(\"Errors: %f, %f, %f\\n\", x[i + 1], err_euler[i + 1], err_heun[i + 1], err_rk[i + 1]);\n    }\n\n    // plot result\n    viplab_plot_polyline_2d(' ', solid, 0, 200, 150, x, euler, steps + 1, \"explicit euler\");\n    viplab_plot_polyline_2d(' ', solid, 200, 150, 0, x, heun, steps + 1, \"heun\");\n    viplab_plot_polyline_2d(' ', solid, 200, 0, 150, x, rk, steps + 1, \"Runge-Kutta 4\");\n    viplab_plot_polyline_2d(' ', solid, 0, 0, 255, x, exact, steps + 1, \"exact\");\n    // plot error\n    viplab_plot_new_frame(\"absolute error\", \"x\", \"error\", linear, linear);\n//    viplab_frame_limits(-0.1, 1.1, -0.1, 2.0);\n    viplab_plot_polyline_2d(' ', solid, 0, 200, 150, x, err_euler, steps + 1, \"explicit euler\");\n    viplab_plot_polyline_2d(' ', solid, 200, 150, 0, x, err_heun, steps + 1, \"heun\");\n    viplab_plot_polyline_2d(' ', solid, 200, 0, 150, x, err_rk, steps + 1, \"Runge-Kutta 4\");\n\n    return (EXIT_SUCCESS);\n}\n\n// one step of exlicit euler method\ndouble explicit_euler_step(double x, double y, double h)\n{\n    return (y + h * evaluate_function(x, y));\n}\n\n// one step of heun method\ndouble heun_step(double x, double y, double h)\n{\n    return (y + 0.5 * h * (evaluate_function(x, y) + \n            evaluate_function(x + h, explicit_euler_step(x, y, h))));\n}\n\n// one step of classic Runge-Kutta 4 method\ndouble rk4_step(double x, double y, double h)\n{\n    double y_   = evaluate_function(x, y);\n    double y_a  = y + h*0.5 + y_;\n    double y_a_ = evaluate_function(x + h*0.5, y_a);\n    double y_b  = y + h*0.5 + y_a_;\n    double y_b_ = evaluate_function(x + h*0.5, y_b);\n    double y_c  = y + h + y_b_;\n    double y_c_ = evaluate_function(x + h, y_c);\n    return       (y + h/6.0*(y_ + 2*y_a_ + 2*y_b_ + y_c_));\n}\n\n// problem description of the ODE\ndouble evaluate_function(double x, double y)\n{\n    return x*cos(40.0*x);\n}\n\n// analytical solution of the ODE\ndouble analytical_solution(double x)\n{\n    return (40.0*x*sin(40.0*x) + cos(40.0*x) - 1.0)/1600.0;\n}\n","emphasis":"High","identifier":"Id3","syntaxHighlighting":"C"}],"identifier":"Id:-1459243654","postTime":"Wed Oct 19 15:38:12 CEST 2011"}}