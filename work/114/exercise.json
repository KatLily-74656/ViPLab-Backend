{"Exercise":{
      "comment": "",
      "config": {"Octave": {
            "interpreting": {"flags": ""},
            "merging": {"sources": [
                  "codeFromStudent",
                  "epilog1"
            ]},
            "stopAfterPhase": "interpreting"
      }},
      "description": "Just press the execute button to see the ploted hypozykloid",
      "elements": [
            {
                  "MIMEtype": "text/plain",
                  "emphasis": "Low",
                  "identifier": "epilog1",
                  "modifiable": false,
                  "name": "",
                  "syntaxHighlighting": "Matlab",
                  "value": "%%%\n% Overwrites the built-in plot function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in plot function except\n% that complex values are forbitten and X values must\n% be provided for every plot.\n% \n% The arguments are X, Y and an optional LineSpec. These\n% two or three arguments can be appended multiple times.\n% X contains the x values of the points, Y the y values.\n% Consecutive points are drawn connected by a line.\n% X and Y must have one matching dimension if at least\n% one is a vector and must have the exact same dimension\n% if moth are matrices.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-08\n%%%\n\nfunction plot(X, Y, varargin)\n\t\n\t%%%\n  % ensure valid arguments\n  assert(not(isempty(X)), 'X must not be empty.');\n\tassert(not(isempty(Y)), 'Y must not be empty.');\n  assert(isnumeric(X), 'X must be numeric.');\n\tassert(isnumeric(Y), 'Y must be numeric.');\n  assert(not(isscalar(X)) || isvector(Y), 'If X is scalar Y must be a vector.');\n\tassert(not(isvector(X) && not(isscalar(X)) && isvector(Y)) || (length(X) == length(Y)), 'Vectors X and Y must have same dimensions.');\n\tassert(not(isvector(X) && not(isscalar(X)) && size(Y, 1) > 1 && size(Y, 2) > 1) || (length(X) == size(Y, 1) || length(X) == size(Y, 2)), 'Vector X and matrix Y must have one dimension in common.');\n\tassert(not(size(X, 1) > 1 && size(X, 2) > 1 && isvector(Y)) || (size(X, 1) == length(Y) || size(X, 2) == length(Y)), 'Matrix X and vector Y must have one dimension in common.');\n\tassert(not(size(X, 1) > 1 && size(X, 2) > 1 && size(Y, 1) > 1 && size(Y, 2) > 1) || isequal(size(X),size(Y)), 'Matrices X and Y must have same dimensions.');\n    \n  %%%\n\t% open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n\t% handle optional arguments\n\tLineSpec = '';\n\tnewArgIn = {};\n\t% if first optional argument is a string, it's the line specification\n\tif (size(varargin, 2) == 1) && ischar(varargin{1})\n\t\tLineSpec = varargin{1};\n\t% pass remaining optional arguments to next plot call\n\telseif (size(varargin, 2) > 1) && ischar(varargin{1})\n\t\tLineSpec = varargin{1};\n\t\tnewArgIn = varargin(2:size(varargin, 2));\n\telseif (size(varargin, 2) > 0)\n\t\tnewArgIn = varargin;\n\tend; %if\n\n\t%%%\n  % write color data\n  if length(LineSpec) > 0\n\t\tif not(isempty(strfind(LineSpec, 'r')))\n\t\t\tfprintf(plot_file, '# color 255 0 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'b')))\n\t\t\tfprintf(plot_file, '# color 0 0 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'g')))\n\t\t\tfprintf(plot_file, '# color 0 255 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'c')))\n\t\t\tfprintf(plot_file, '# color 0 255 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'm')))\n\t\t\tfprintf(plot_file, '# color 255 0 255\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'y')))\n\t\t\tfprintf(plot_file, '# color 255 255 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'k')))\n\t\t\tfprintf(plot_file, '# color 0 0 0\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'w')))\n\t\t\tfprintf(plot_file, '# color 255 255 255\\n');\n\t\tend; %if\n\t\n\t%%%\n  % write symbol data\n\t\tif not(isempty(strfind(LineSpec, 'x')))\n\t\t\tfprintf(plot_file, '# symbol x\\n');\n\t\telseif not(isempty(strfind(LineSpec, '*')))\n\t\t\tfprintf(plot_file, '# symbol *\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'v')))\n\t\t\tfprintf(plot_file, '# symbol v\\n');\n\t\telseif not(isempty(strfind(LineSpec, '^')))\n\t\t\tfprintf(plot_file, '# symbol ^\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'o')))\n\t\t\tfprintf(plot_file, '# symbol o\\n');\n\t\telseif not(isempty(strfind(LineSpec, 's')))\n\t\t\tfprintf(plot_file, '# symbol s\\n');\n\t\telseif not(isempty(strfind(LineSpec, 'd')))\n\t\t\tfprintf(plot_file, '# symbol d\\n');\n\t\telse\n\t\t\tfprintf(plot_file, '# symbol none\\n');\n\t\tend; %if\n\tend; %if\n\t\n\t%%%\n\t% write plot data\n\t\n\t% if X is a scalar => Y a vector\n\tif isscalar(X)\n\t\tfor i=1:length(Y)\n\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(1), Y(i), X(1), Y(i));\n\t\tend; %for\n\t% if both X and Y are vectors\n\telseif isvector(X) && isvector(Y)\n\t\tfor i=1:(length(X)-1)\n\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(i), Y(i), X(i+1), Y(i+1));\n\t\tend; %for\n\t% if X is a vector and Y a matrix\n\telseif isvector(X) && size(Y, 1) > 1 && size(Y, 2) > 1\n\t\t% rotate matrix Y to match dimensions\n\t\tif length(X) ~= size(Y, 2)\n\t\t\tY = Y';\n\t\tend;% if\n\t\tfor j=1:size(Y, 1)\n\t\t\tfor i=1:(length(X)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(i), Y(j, i), X(i+1), Y(j, i+1));\n\t\t\tend; %for\n\t\tend; %for\n\t% if X is a matrix and Y a vector\n\telseif size(X, 1) > 1 && size(X, 2) > 1 && isvector(Y)\n\t\t% rotate matrix X to match dimensions\n\t\tif size(X, 2) ~= length(Y)\n\t\t\tX = X';\n\t\tend;% if\n\t\tfor j=1:size(X, 1)\n\t\t\tfor i=1:(length(Y)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(j, i), Y(i), X(j, i+1), Y(i+1));\n\t\t\tend; %for\n\t\tend; %for\n\t% if both X and Y are matrices\n\telse % size(X, 1) > 1 && size(X, 2) > 1 && size(Y, 1) > 1 && size(Y, 2) > 1)\n\t\tfor i=1:size(X, 2)\n\t\t\tfor j=1:(size(X, 1)-1)\n\t\t\t\tfprintf(plot_file, '%f %f %f %f\\n', X(j, i), Y(j, i), X(j+1, i), Y(j+1, i));\n\t\t\tend; %for\n\t\tend; %for\n\tend; %if\n\n  %%%\n  % close file\n  fclose(plot_file);\n\t\n\t%%%\n\t% recursivly call plot to work off remaining optional arguments\n\tif size(newArgIn, 2) == 0\n\t\treturn;\n\tend; %if\n\t\n\tassert(size(newArgIn, 2) >= 2, 'Wrong number of arguments, expected more arguments.');\n\t\n\tX = newArgIn{1};\n\tY = newArgIn{2};\n\tif size(newArgIn, 2) == 2\n\t\tplot(X, Y);\n\telse\n\t\tplot(X, Y, newArgIn{3:size(newArgIn, 2)});\n\tend; %if\n\t\nend %function\n\n%%%\n% Overwrites the built-in legend function and gives out\n% a ViPLab graphic format file (.vgf).\n% It breaks with th built-in legend function because it\n% can only handly one argument. If the legend is set all\n% plots from now on will use the new legend. To stay\n% compatible with the built-in legend use legend('')\n% at the end of your program to prevent a legend.\n% \n% The argument must be a string. It does not support\n% handles, orientation or multiple legends.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-12\n%%%\n\nfunction legend(PlotLegend)\n  % ensure valid arguments\n  assert(ischar(PlotLegend), 'First argument in legend must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write legend data\n  fprintf(plot_file, '# legend %s\\n', PlotLegend);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in title function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in legend function and adds\n% a title to the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction title(PlotTitle)\n  % ensure valid arguments\n  assert(ischar(PlotTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# title %s\\n', PlotTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in plot function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in plot function except\n% that complex values are forbitten and X values must\n% be provided for every plot.\n% \n% The arguments are X, Y and an optional LineSpec. These\n% two or three arguments can be appended multiple times.\n% X contains the x values of the points, Y the y values.\n% Consecutive points are drawn connected by a line.\n% X and Y must have one matching dimension if at least\n% one is a vector and must have the exact same dimension\n% if moth are matrices.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-01\n%%%\n\nfunction axis(Range)\n  xmin = Range(1);\n  xmax = Range(2);\n  ymin = Range(3);\n  ymax = Range(4);\n\t%%%\n  % ensure valid arguments\n  assert(isreal(xmin) && isreal(xmax) && isreal(ymin) && isreal(ymax), 'All arguments must be real numbers.');\n  assert(isscalar(xmin) && isscalar(xmax) && isscalar(ymin) && isscalar(ymax), 'All arguments must be scalars.');\n  assert(xmin < xmax, 'xmin must be smaller than xmax.');\n\tassert(ymin < ymax, 'ymin must be smaller than ymax.');\n\n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write axis data\n  fprintf(plot_file, '# x-range %f %f\\n', xmin, xmax);\n  fprintf(plot_file, '# y-range %f %f\\n', ymin, ymax);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in figure function.\n% The function does nothing but surpresses the built-in\n% figure function which opens a new plot window.\n%\n% It does not accept any arguments and has no return values.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-01\n%%%\n\nfunction figure()\n  % nothing todo just prevent buit-in function to open a plot window\nend %function\n\n%%%\n% Overwrites the built-in xlabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in xlabel function and adds\n% a label to the X-axis of the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction xlabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# x-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in ylabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in ylabel function and adds\n% a label to the Y-axis of the plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction ylabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# y-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n%%%\n% Overwrites the built-in zlabel function and gives out\n% a ViPLab graphic format file (.vgf).\n% It behaves similar to built-in zlabel function and adds\n% a label to the Z-axis of the 3d-plot.\n% \n% The arguments must be a string. No handles or properties are\n% supported.\n%\n% Usage: Put file in the same directory containing your programm.\n%        Matlab will warn you that it may conflict with built-in\n%        functions but that is intended.\n%\n% Author: C. Grüninger (2010)\n%\n% Copyright: All rights reserved C. Grüninger 2010\n%            This function is licenced under the \n%            terms of GNU GPL 3 or higher.\n% Version: 2010-11-09\n%%%\n\nfunction zlabel(AxisTitle)\n  % ensure valid arguments\n  assert(ischar(AxisTitle), 'First argument in title must be a string.');\n    \n\t%%%\n  % open file to append, use UTF-8 encoding\n  plot_file = fopen('vipplot.vgf', 'a');%, 'n', 'UTF-8');\n\n\t%%%\n  % write title data\n  fprintf(plot_file, '# z-label %s\\n', AxisTitle);\n\n\t%%%\n  % close file\n  fclose(plot_file);\nend %function\n\n",
                  "visible": true
            },
            {
                  "MIMEtype": "text/plain",
                  "emphasis": "High",
                  "identifier": "codeFromStudent",
                  "modifiable": true,
                  "name": "",
                  "syntaxHighlighting": "Matlab",
                  "value": "function hypozykloid()\nhold on;\na = 14/3;\nb = 1.0;\n[p,q] = rat((a-b)/b);\ntmax = q*2*pi;\n\nt = linspace(0,tmax,300);\nx = (a-b)*cos(t) + b*cos((a-b)/b*t);\ny = (a-b)*sin(t) - b*sin((a-b)/b*t);\n\ntitle('zykloide mit b=1');\n%legend('a=14/3');\nplot(x,y,'g');\n\na = 3;\n[p,q] = rat((a-b)/b);\ntmax = q*2*pi;\n\nt = linspace(0,tmax,300);\nx = (a-b)*cos(t) + b*cos((a-b)/b*t);\ny = (a-b)*sin(t) - b*sin((a-b)/b*t);\n\n%legend('a=3');\nplot(x,y,'c');\nhold off;\nend\n",
                  "visible": true
            }
      ],
      "identifier": "",
      "name": "[stresstest] Hypozykloid",
      "postTime": "Do 21. Apr 18:29:38 CEST 2011"
}}